/**
\image html RSLogo.png
\image latex RSLogo.pdf

\mainpage
\section intro Introduction
this is the RadioScatter module. It has been made to run independently of, or within, GEANT4. It simulates RF scattering from points in 4 space, which may be ionization deposits left by particle showers produced in geant4. it is highly customizable. this documentation will be expanded.

\section install Installation
\subsection prerequisites Prerequisites

ROOT 6.08 or higher (https://root.cern.ch/downloading-root)

the module slac_rf is g4 source code that will produce histograms of voltages received in a scattering experiment. to run inside of GEANT4, you'll need to have that installed

GEANT4 (https://geant4.web.cern.ch/geant4/support/download.shtml)
The GEANT4 software is fully independent of RadioScatter, and its license is available here: (https://geant4.web.cern.ch/license/LICENSE.html). Per that license: "This product includes software developed by Members of the Geant4 Collaboration ( http://cern.ch/geant4)."

you can use any monte-carlo program you want with RadioScatter, but this package includes some GEANT4 programs, built on their examples, that harness the full power of GEANT to make realistic rf scattering signals. if you want to use those, i'm gonna assume that you know how to use GEANT4 and ROOT.




\subsection default Default installation

first be sure to have ROOT (as above) installed. there's lots of documentation on building those available elsewhere. and if you want to use it with GEANT, you'll need to have that installed too. then:

```
cd /your/favorite/source/dir  (like /usr/local or something)
git clone https://github.com/prchyr/RadioScatter.git
cd RadioScatter
./install.sh
```

this will install the header files and shared libraries (for root analysis) to the right places. it will put the libs inside of /usr/local/lib and the header files in /usr/local/include. It will make a build directory (inside the RadioScatter directory) called build, where the build products are placed before they are installed in the proper location.


\subsection custom Custom Installation


say you want your libraries and headers installed in some other place than /usr/local, you can set the RS_INSTAL_DIR variable in your bashrc. then libraries will install to RS_INSTALL_DIR/lib and headers to RS_INSTALL_DIR/include

```
cd /your/favorite/source/dir
git clone https://github.com/prchyr/RadioScatter.git
export RS_INSTALL_DIR=/your/preferred/install/dir
cd RadioScatter
./install.sh 
```

tested on:

Ubuntu 16.04/gcc 5.4

Red Hat Enterprise server 6.9/gcc 4.8.5

Ubuntu 18.04/gcc 7.4


\section using Usage




the theory of operation is outlined in this paper:

http://arxiv.org/abs/1710.02883

This document serves as the primary documentation, pulled from the source code.

how it works, breifly:

The RadioScatter module calculates rf scattering from an energy deposit in 4 space. It uses the position, energy deposited, region over which the energy was deposited, and the ionization energy of the material to get a number of free charges over which to perform the scatter, and a number density to get material effects (plasma screening, eave damping, etc.) it is most useful to have the deposits be from some monte-carlo generation, like GEANT4. you can probably fit it into any MC program with relative ease, or generate your own plasma cloud to scatter radio from. 

\subsection example Some Examples:


the examples directory has some use cases that don't involve geant4. to compile, be sure to link to the radio scatter library, i e -lRadioScatter, and also the root libraries, like so:

~~~{.sh}
g++ -std=c++0x example.cc -o example `root-config --cflags --glibs --libs` -lRadioScatter
~~~

in the examples, there is a use case where a shower has been prepared using GEANT4 and then this is used in a standalone program to scatter radio, as an example of runnning radioscatter outside of a monte carlo program. various options are shown and explained in the example


\subsection geant GEANT4 usage


there is a GEANT4 module called slac_rf, so to install it, do

~~~{.sh}
cd /your/GEANT/app/dir
mkdir slac_rf_build
cd slac_rf_build
cmake /path/to/RadioScatter/example/GEANT4/slac_rf
make -b -j4
~~~

which will make a build directory somewhere you want it to live, then install the GEANT4 simulation there linked to the RadioScatter libraries, once you've installed them as above.

how it works within GEANT4:

the Radioscatter.hh file is a header file that needs to be included in the GEANT4 source. there should be several different ways to use it, but one way is to globally declare the RadioScatter object in the main simulation .cc file of the simulation. it is then best to pass the constructed radio scatter object to the action initialization and the run action and stepping action files of the simulation. this will allow access to different methods that are useful at different points in the sumulation lifetime. for example, the data is filled during the stepping action phase, but the ROOT histograms are cosed at the end of the run action, through a built in GEANT4 method called EndOfRunAction. 

there are also several commands available through the RSmessenger.hh/cc files which allow for manipulation of the radioscatter configuration through the GEANT4 macro files. things such as

/RS/setTxPos 5 0 3 m

and

/RS/setTxPower 100

/RS/setPlasmaLifetime 3

which can be used without the need to re-compile the GEANT4 source, making running simulations much more simple.

ok so to actually run the program,

    cd /path/to/geant4/program/install/dir/

(default is RadioScatter/slac_build unless you provided an argument to install.sh)

    ./slac_rf -m run1.mac -f "/path/to/file/and/filename.root"

to set the root file name, (-f) which is optional. each run is stored in an entry in a tree. there is a default macro

run1.mac:
	-this will set the tx position and the energies and such, and then will simulate the received signal in 3 antennas




\subsection use Some Use Cases

One use of RadioScatter is to generate a lot of events over some volume using a monte-carlo approach, and calculate information about each event. If you run within GEANT4 using one of the examples included, you simply do /RS/setFillByEvent 1 within your macro. This calls a function, radio->writeEvent() after each event. Coupled with setMakeSummary(1), this is a good way to get information that you can use to develop sensitivity curves, etc.

Another use of RadioScatter is to generate a statistically varied sample of events at the same vertex position, to achieve a high-resolution signal. Because RadioScatter calculates the scattering from each individual charge, we can't run over an actual 10^18 eV cascade, as it would take too long. running over a 100GeV cascade even begins to take a long time. but, you can run over a 1-10GeV cascade, which is fast, and then run multiple of them to get some statistical variation in the 4-positions of the ionization deposits. In the next section, we discuss how scaling works in RadioScatter to make this possible.

\subsection scaling Scaling in RadioScatter

Because the radio signal is built up through calculation of scattering from the individual particles, the simulation time scales with energy. And, when running in GEANT4, there is an upper limit of about 100TeV for some of the physics processes. To simulate higher energies, RadioScatter employs empirical scaling of the density of the cascade, the length of the cascade, and the associated travel time of the lengthened cascade. We breifly discuss here how this is done.

There are two regimes in which scaling might be wanted.

1) for a collider experiment. instead of running 10^9 cascades to simulate a bunch of 1 billion primary particles, you might want to just run 1 cascade and scale the number density by 10^9 for computational efficiency.

2) for a UHE experiment. Instead of trying to simulate a 1PeV cascade, you'd simulate a 10GeV cascade and then set a target energy of 1PeV, and then scale both the number density and the physical scale of the cascade to the target energy.




\subsubsection indep Running Independently of GEANT4 or other MC program

if running radioscatter on an independently generated energy deposition, scaling may not be required (for example, if you have generated a 3-d energy deposition profile for a cascade at 1 EeV, RadioScatter simply runs off of that). If, however, you use a lower energy cascade (10GeV, for example) and want to scale it up to a 1 EeV cascade, then scaling must be enabled. First, RadioScatter needs to know the energy of the primary particle of the cascade being simulated. so in this example, you'd set it to 10GeV (be sure to specify an energy unit). so,

setPrimaryEnergy(10*TUtilRadioScatter::GeV);

then, to scale this up to the proper density, you set the target energy to 1 EeV which tells RadioScatter what the target energy is to make the calculations for scaling. 

setTargetEnergy(1e9*TUtilRadioScatter::GeV);

This essentially makes a scaling factor that each ionization deposity is multiplied by to increase the ionization densty to the target point (for details see arxiv:1710.02883). However, the profile of a 10 GeV particle and a 1 EeV particle are not the same, so the final step to make the scaling work is:

setScaleByEnergy(1);

which scales the cascade along the longitudinal dimension and the time dimension the appropriate amount for the given scaling. 

Alternatively, if you are wanting to simulate a beam test in with there are a large number of primaries at a single energy, meaning you want to scale the density but not the physical/temporal extent of the cascade, you can use setNPrimaries but not scale with energy, like:

setNPrimaries(1e9);
setScaleByEnergy(0);

\subsubsection within Running within GEANT4

inside of GEANT4 there is a different set of steps to set the correct scaling. It is important to remember that RadioScatter and GEANT4 are different programs running together, so there are some commands for one, and some commands for the other. when running in GEANT4, you need to tell GEANT4 the primary energy, not RadioScatter. so instead of setPrimaryEnergy() (RadioScatter command) you use the GEANT4 command in your macro,

/gps/energy 10GeV

this also sets the primaryParticleEnergy in GEANT, so you don't need to set that manually. You can, but it will be overwritten; this is to maintain internal consistsncy when running in G4 mode.

you can then set the target energy (RadioScatter command) as above, and then set the scaling (RadioScatter command) to 1 in your macro file like:

/RS/setTargetEnergy 1e9 GeV
/RS/setScaleByEnergy 1

another thing you can do in GEANT4 is simulate more than one event. meaning, you can do

/run/beamOn(1)

or

/run/beamOn(n)

where n is any number of events that will be simulated with the set simulation parameters. so if you did

/gps/energy 10GeV
/run/beamOn(10)

then it would simulate 10 events, each at 10GeV, at the same vertex position (set elsewhere). You have flexibility in how these events are saved. You can either set them to be saved as individual events, or you can have them averaged into a single event. this is done via

setFillByEvent(0) to have them averaged and
setFillByEvent(1) to save each event individually.

when using setFillByEvent(0), the resultant radioscatter signal is scaled by 1/n, with n being the argument to /run/beamOn(n), such that the scatter you receive is the appropriate amplitude for the specified input energy. Why run like this? well, this increases the fideliity of the time-domain signal, by 'filling in' the scattering space randomly with different events, all of the same energy. This is different from using the nPrimaries scaling, which simply scales the number of ionization electrons at each point for a single cascade, because different events have different ionization electron geometry. you can think of it as the difference between increasing the brightness of a photo of a lightning strike and a long-exposure photo of lightning strikes. a single lightning strike has arms in random positions. to scale up the 'density' of the lightning, you could simply increase the brightness of that single strike by some value of n strikes. but in the case of numerous lightning strikes starting from the same place, the overall integrated brightness would increase by n strikes, but the random arms would slowly fill in the frame, as a time-integrated collection of the many strikes. This is essentially the difference between using setNPrimaries [increasing the brightness] and beamOn(n)[long exposure]. The resultant signal will have the same(ish) amplitude, because radar only cares about the total number of scattering centers, but the long-exposure method will be more robust in terms of signal fidelity, because the more filled-out the scattering suface is, the cleaner the reflected signal.

so why use nPrimaries ever? well, it's fast. ideally you'd just do /run/beamOn(1e8) and you're done, but this would take years to run. so it is up to the user to define what kind of signal fidelity is needed for a given simulation, and set all of these various parameters appropriately for their use case.

\subsubsection guidance General Guidance

for a general usage:

a 10 GeV input cascade results in decent signal fidelity. This is what has been used as the base energy for cascades simulated for RET-N. for T576, we used a 10-13.6GeV primary (depending on the actual beam energy) and then did /run/beamOn(10) to get a higher-fideilty signal. we found that beyond that, the time domain signal did not change in any noticeable way by increasing the argument to beamOn(), and only increased the comuptational time. [note: remember that the resultant RF signal is scaled by 1/n. so by doubling the number to beamOn you are not doubling the signal amplitude, just the signal fidelity, because the resultant amplitude is scaled back to reflect the added cascade(s)]. a 1GeV cascade will have fairly significant shot-to-shot differences, but is very fast [speed is linear in energy/particle number, 10GeV is 10x slower than 1GeV], so if number is your game and you can accept some error on the scattered signal, 1GeV may be sufficient. This can be appropriate for monte-carlo studies. 




enjoy. questions can be sent to prohira dot 1 at osu dot edu
*/